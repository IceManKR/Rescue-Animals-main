import { HtmlTagDescriptor, ConfigEnv, LegacyOptions as LegacyOptions$1, UserConfig, UserConfigExport } from 'vite';
import * as vite from 'vite';
export { vite };
export { loadConfigFromFile, loadEnv, mergeConfig } from 'vite';
import { Options } from 'html-minifier-terser';
import legacy from '@vitejs/plugin-legacy';
import { Options as Options$1 } from '@vitejs/plugin-react';
import { AntdResolve, VitePluginOptions } from 'vite-plugin-style-import';

interface OverrideHtml {
    html?: {
        /**
         * Inject data into html by using `<%=KEY%>`
         */
        injectData?: Record<string, any>;
        /**
         * Inject tag into html:
         * [
         *   {
         *      tag: 'div',
         *      injectTo: 'body-prepend',
         *       attrs: {
         *         id: 'tag',
         *       },
         *   },
         *   {...}
         * ]
         */
        injectTags?: HtmlTagDescriptor[];
        /**
         * @default true for build
         */
        minify?: boolean | Options;
        /**
         * Where to search `index.html` file.
         * @default index.html
         */
        template?: string;
    };
}

declare type LegacyOptions = NonNullable<Parameters<typeof legacy>[0]>;
interface OverrideLegacy {
    /**
     * For browsers which doesn't support es module by use @vitejs/plugin-legacy.
     * @see https://caniuse.com/es6-module
     */
    legacy?: {
        /**
         * @default false
         */
        enable?: boolean | ((env: ConfigEnv) => boolean);
        options?: LegacyOptions | ((originalOptions: LegacyOptions, env: ConfigEnv) => LegacyOptions | undefined);
    } & LegacyOptions$1;
}

interface OverrideMix {
    /**
     * Base public path when served in development or production.
     * @default './'
     */
    base?: string;
    /**
     * @default false
     */
    clearScreen?: boolean;
}

interface OverrideReact {
    react?: Options$1 | ((originalOptions: Options$1, env: ConfigEnv) => Options$1 | undefined);
}

declare const styleResolves: {
    antd: typeof AntdResolve;
};
interface OverrideStyleImport {
    styleImport?: {
        enable?: boolean | ((env: ConfigEnv) => boolean);
        options?: VitePluginOptions | ((originalOptions: VitePluginOptions, env: ConfigEnv) => VitePluginOptions | undefined);
    };
}

interface Config extends OverrideMix, OverrideReact, OverrideLegacy, OverrideHtml, OverrideStyleImport, Omit<UserConfig, 'legacy'> {
}
declare type ConfigFn = (env: ConfigEnv) => Config;
declare type ConfigExport = Config | ConfigFn;
declare const defineConfig: (config?: ConfigExport) => UserConfigExport;

export { Config, ConfigExport, ConfigFn, defineConfig, styleResolves };
import 'vite/client';
