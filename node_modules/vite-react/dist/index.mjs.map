{"version":3,"sources":["../src/index.ts","../src/vite.ts","../src/handler/build.ts","../src/handler/css.ts","../src/handler/html.ts","../src/handler/legacy.ts","../src/util/override.ts","../src/util/enable.ts","../src/handler/mix.ts","../src/handler/react.ts","../src/handler/server.ts","../src/handler/styleImport.ts"],"sourcesContent":["export * as vite from 'vite';\nexport { loadConfigFromFile, loadEnv, mergeConfig } from 'vite';\nexport * from './vite';\nexport { styleResolves } from './handler/styleImport';\n","import { ConfigEnv, defineConfig as origin, UserConfig, UserConfigExport } from 'vite';\nimport { handleBuild } from './handler/build';\nimport { handleCss } from './handler/css';\nimport { handleHtml, OverrideHtml } from './handler/html';\nimport { handleLegacy, OverrideLegacy } from './handler/legacy';\nimport { handleMix, OverrideMix } from './handler/mix';\nimport { handleReact, OverrideReact } from './handler/react';\nimport { handleServer } from './handler/server';\nimport { handleStyleImport, OverrideStyleImport } from './handler/styleImport';\n\nexport interface Config\n  extends OverrideMix,\n    OverrideReact,\n    OverrideLegacy,\n    OverrideHtml,\n    OverrideStyleImport,\n    Omit<UserConfig, 'legacy'> {}\n\nexport type ConfigFn = (env: ConfigEnv) => Config;\nexport type ConfigExport = Config | ConfigFn;\n\nexport const defineConfig = (config: ConfigExport = {}): UserConfigExport => {\n  return origin((env) => {\n    return parseConfig(typeof config === 'function' ? config(env) : config, env);\n  });\n};\n\nconst parseConfig = (config: Config, env: ConfigEnv) => {\n  handleReact(config, env);\n  handleLegacy(config, env);\n  handleCss(config, env);\n  handleStyleImport(config, env);\n  handleBuild(config, env);\n  handleMix(config, env);\n  handleServer(config, env);\n  handleHtml(config, env);\n\n  return config;\n};\n","import { extname } from 'path';\nimport { ConfigEnv } from 'vite';\nimport { OutputOptions } from 'rollup';\nimport { Config } from '../vite';\n\nconst assetPatterns = <const>[\n  ['media', /\\.(mp4|webm|ogg|mp3|wav|flac|aac|swf)(\\?.*)?$/i],\n  ['image', /\\.(png|jpe?g|gif|ico|svg|webp)(\\?.*)?$/i],\n  ['font', /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/i],\n  ['style', /\\.(s?css|less|styl)(\\?.*)?$/i],\n];\n\nexport const handleBuild = (config: Config, _env: ConfigEnv) => {\n  config.build ||= {};\n  // Unnecessary to show this and improve build speed.\n  config.build.reportCompressedSize ??= false;\n\n  config.build.rollupOptions ||= {};\n  config.build.rollupOptions.output ||= {};\n\n  const keys = Object.keys(config.build.rollupOptions.output) as (keyof OutputOptions)[];\n  const overrideKeys: (keyof OutputOptions)[] = [\n    'assetFileNames',\n    'chunkFileNames',\n    'entryFileNames',\n  ];\n  const userDefined = keys.some((key) => overrideKeys.includes(key));\n\n  if (!userDefined) {\n    config.build.rollupOptions.output = {\n      ...config.build.rollupOptions.output,\n      assetFileNames(assetInfo) {\n        const ext = extname(assetInfo.name || '');\n        let folder = 'misc';\n\n        for (const [name, pattern] of assetPatterns) {\n          if (pattern.test(ext)) {\n            folder = name;\n            break;\n          }\n        }\n\n        return `bundle/${folder}/[name]-[hash][extname]`;\n      },\n      chunkFileNames: 'bundle/js/[name]-[hash].js',\n      entryFileNames: 'bundle/js/[name]-[hash].js',\n    };\n  }\n};\n","import { ConfigEnv } from 'vite';\nimport { Config } from '../vite';\n\nexport const handleCss = (config: Config, env: ConfigEnv) => {\n  config.css ||= {};\n  config.css.modules ||= {};\n\n  if (config.css.modules !== false) {\n    config.css.modules.generateScopedName ??=\n      env.command === 'build' ? '[hash:base64]' : '[path][name]__[local]';\n  }\n};\n","import { ConfigEnv, HtmlTagDescriptor } from 'vite';\nimport { createHtmlPlugin } from 'vite-plugin-html';\nimport { Options as MinifyOptions } from 'html-minifier-terser';\nimport { Config } from '../vite';\n\nexport interface OverrideHtml {\n  html?: {\n    /**\n     * Inject data into html by using `<%=KEY%>`\n     */\n    injectData?: Record<string, any>;\n    /**\n     * Inject tag into html:\n     * [\n     *   {\n     *      tag: 'div',\n     *      injectTo: 'body-prepend',\n     *       attrs: {\n     *         id: 'tag',\n     *       },\n     *   },\n     *   {...}\n     * ]\n     */\n    injectTags?: HtmlTagDescriptor[];\n    /**\n     * @default true for build\n     */\n    minify?: boolean | MinifyOptions;\n    /**\n     * Where to search `index.html` file.\n     * @default index.html\n     */\n    template?: string;\n  };\n}\n\nexport const handleHtml = (config: Config, env: ConfigEnv) => {\n  const html = config.html;\n\n  if (!html) {\n    return;\n  }\n\n  let minify = html.minify;\n  if (minify === undefined) {\n    minify = env.command === 'build';\n  }\n\n  config.plugins ||= [];\n  config.plugins.push(\n    createHtmlPlugin({\n      minify: minify,\n      inject: {\n        data: html.injectData,\n        tags: html.injectTags,\n      },\n      template: html.template,\n    }),\n  );\n};\n","import { ConfigEnv } from 'vite';\nimport { LegacyOptions as OriginLegacyOptions } from 'vite';\nimport legacy from '@vitejs/plugin-legacy';\nimport { Config } from '../vite';\nimport { override } from '../util/override';\nimport { enable } from '../util/enable';\n\nexport type LegacyOptions = NonNullable<Parameters<typeof legacy>[0]>;\n\nexport interface OverrideLegacy {\n  /**\n   * For browsers which doesn't support es module by use @vitejs/plugin-legacy.\n   * @see https://caniuse.com/es6-module\n   */\n  legacy?: {\n    /**\n     * @default false\n     */\n    enable?: boolean | ((env: ConfigEnv) => boolean);\n    options?:\n      | LegacyOptions\n      | ((originalOptions: LegacyOptions, env: ConfigEnv) => LegacyOptions | undefined);\n  } & OriginLegacyOptions;\n}\n\nexport const handleLegacy = (config: Config, env: ConfigEnv) => {\n  config.plugins ||= [];\n\n  if (enable(config.legacy?.enable, env, false)) {\n    config.plugins.push(legacy(override(config.legacy?.options, env, {})));\n  }\n};\n","import { ConfigEnv } from 'vite';\n\nexport const override = <T extends object>(\n  fn: ((options: T, env: ConfigEnv) => T | undefined) | (T | undefined),\n  env: ConfigEnv,\n  options: T,\n): T => {\n  if (typeof fn === 'object') {\n    return fn;\n  }\n\n  if (typeof fn === 'function') {\n    const result = fn(options, env);\n    return result === undefined ? options : result;\n  }\n\n  return options;\n};\n","import { ConfigEnv } from 'vite';\n\nexport const enable = (\n  fn: boolean | ((env: ConfigEnv) => boolean) | undefined,\n  env: ConfigEnv,\n  defaultEnalbe: boolean | ((env: ConfigEnv) => boolean),\n) => {\n  if (typeof fn === 'function') {\n    return fn(env);\n  }\n\n  if (typeof fn === 'boolean') {\n    return fn;\n  }\n\n  if (typeof defaultEnalbe === 'function') {\n    return defaultEnalbe(env);\n  }\n\n  return defaultEnalbe;\n};\n","import { ConfigEnv } from 'vite';\nimport { Config } from '../vite';\n\nexport interface OverrideMix {\n  /**\n   * Base public path when served in development or production.\n   * @default './'\n   */\n  base?: string;\n  /**\n   * @default false\n   */\n  clearScreen?: boolean;\n}\n\nexport const handleMix = (config: Config, _env: ConfigEnv) => {\n  config.base ??= './';\n  config.clearScreen ??= false;\n};\n","import { ConfigEnv } from 'vite';\nimport react, { Options as ReactOptions } from '@vitejs/plugin-react';\nimport { override } from '../util/override';\nimport { Config } from '../vite';\n\nexport interface OverrideReact {\n  react?:\n    | ReactOptions\n    | ((originalOptions: ReactOptions, env: ConfigEnv) => ReactOptions | undefined);\n}\n\nexport const handleReact = (config: Config, env: ConfigEnv) => {\n  config.plugins ||= [];\n  config.plugins.push(react(override(config.react, env, {})));\n};\n","import { ConfigEnv } from 'vite';\nimport { Config } from '../vite';\n\nexport const handleServer = (config: Config, _env: ConfigEnv) => {\n  config.server ||= {};\n  config.server.open ??= true;\n};\n","import { ConfigEnv } from 'vite';\nimport {\n  VitePluginOptions as StyleImportOptions,\n  createStyleImportPlugin,\n} from 'vite-plugin-style-import';\nimport { override } from '../util/override';\nimport { enable } from '../util/enable';\nimport { Config } from '../vite';\nimport { AntdResolve } from 'vite-plugin-style-import';\n\nexport const styleResolves = {\n  antd: AntdResolve,\n};\n\nexport interface OverrideStyleImport {\n  styleImport?: {\n    enable?: boolean | ((env: ConfigEnv) => boolean);\n    options?:\n      | StyleImportOptions\n      | ((originalOptions: StyleImportOptions, env: ConfigEnv) => StyleImportOptions | undefined);\n  };\n}\n\nexport const handleStyleImport = (config: Config, env: ConfigEnv) => {\n  config.plugins ||= [];\n\n  if (enable(config.styleImport?.enable, env, true)) {\n    config.plugins.push(createStyleImportPlugin(override(config.styleImport?.options, env, {})));\n  }\n};\n"],"mappings":";AAAA;AACA;;;ACDA;;;ACAA;AAKA,IAAM,gBAAuB;AAAA,EAC3B,CAAC,SAAS,gDAAgD;AAAA,EAC1D,CAAC,SAAS,yCAAyC;AAAA,EACnD,CAAC,QAAQ,iCAAiC;AAAA,EAC1C,CAAC,SAAS,8BAA8B;AAC1C;AAEO,IAAM,cAAc,CAAC,QAAgB,SAAoB;AAC9D,SAAO,UAAU,CAAC;AAElB,SAAO,MAAM,yBAAyB;AAEtC,SAAO,MAAM,kBAAkB,CAAC;AAChC,SAAO,MAAM,cAAc,WAAW,CAAC;AAEvC,QAAM,OAAO,OAAO,KAAK,OAAO,MAAM,cAAc,MAAM;AAC1D,QAAM,eAAwC;AAAA,IAC5C;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,QAAM,cAAc,KAAK,KAAK,CAAC,QAAQ,aAAa,SAAS,GAAG,CAAC;AAEjE,MAAI,CAAC,aAAa;AAChB,WAAO,MAAM,cAAc,SAAS;AAAA,MAClC,GAAG,OAAO,MAAM,cAAc;AAAA,MAC9B,eAAe,WAAW;AACxB,cAAM,MAAM,QAAQ,UAAU,QAAQ,EAAE;AACxC,YAAI,SAAS;AAEb,mBAAW,CAAC,MAAM,YAAY,eAAe;AAC3C,cAAI,QAAQ,KAAK,GAAG,GAAG;AACrB,qBAAS;AACT;AAAA,UACF;AAAA,QACF;AAEA,eAAO,UAAU;AAAA,MACnB;AAAA,MACA,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,IAClB;AAAA,EACF;AACF;;;AC7CO,IAAM,YAAY,CAAC,QAAgB,QAAmB;AAC3D,SAAO,QAAQ,CAAC;AAChB,SAAO,IAAI,YAAY,CAAC;AAExB,MAAI,OAAO,IAAI,YAAY,OAAO;AAChC,WAAO,IAAI,QAAQ,uBACjB,IAAI,YAAY,UAAU,kBAAkB;AAAA,EAChD;AACF;;;ACVA;AAoCO,IAAM,aAAa,CAAC,QAAgB,QAAmB;AAC5D,QAAM,OAAO,OAAO;AAEpB,MAAI,CAAC,MAAM;AACT;AAAA,EACF;AAEA,MAAI,SAAS,KAAK;AAClB,MAAI,WAAW,QAAW;AACxB,aAAS,IAAI,YAAY;AAAA,EAC3B;AAEA,SAAO,YAAY,CAAC;AACpB,SAAO,QAAQ,KACb,iBAAiB;AAAA,IACf;AAAA,IACA,QAAQ;AAAA,MACN,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,IACb;AAAA,IACA,UAAU,KAAK;AAAA,EACjB,CAAC,CACH;AACF;;;AC1DA;;;ACAO,IAAM,WAAW,CACtB,IACA,KACA,YACM;AACN,MAAI,OAAO,OAAO,UAAU;AAC1B,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,OAAO,YAAY;AAC5B,UAAM,SAAS,GAAG,SAAS,GAAG;AAC9B,WAAO,WAAW,SAAY,UAAU;AAAA,EAC1C;AAEA,SAAO;AACT;;;ACfO,IAAM,SAAS,CACpB,IACA,KACA,kBACG;AACH,MAAI,OAAO,OAAO,YAAY;AAC5B,WAAO,GAAG,GAAG;AAAA,EACf;AAEA,MAAI,OAAO,OAAO,WAAW;AAC3B,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,kBAAkB,YAAY;AACvC,WAAO,cAAc,GAAG;AAAA,EAC1B;AAEA,SAAO;AACT;;;AFKO,IAAM,eAAe,CAAC,QAAgB,QAAmB;AAzBhE;AA0BE,SAAO,YAAY,CAAC;AAEpB,MAAI,OAAO,aAAO,WAAP,mBAAe,QAAQ,KAAK,KAAK,GAAG;AAC7C,WAAO,QAAQ,KAAK,OAAO,SAAS,aAAO,WAAP,mBAAe,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC;AAAA,EACvE;AACF;;;AGhBO,IAAM,YAAY,CAAC,QAAgB,SAAoB;AAC5D,SAAO,SAAS;AAChB,SAAO,gBAAgB;AACzB;;;ACjBA;AAUO,IAAM,cAAc,CAAC,QAAgB,QAAmB;AAC7D,SAAO,YAAY,CAAC;AACpB,SAAO,QAAQ,KAAK,MAAM,SAAS,OAAO,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;AAC5D;;;ACXO,IAAM,eAAe,CAAC,QAAgB,SAAoB;AAC/D,SAAO,WAAW,CAAC;AACnB,SAAO,OAAO,SAAS;AACzB;;;ACLA;AAAA;AAAA;AAOA;AAEO,IAAM,gBAAgB;AAAA,EAC3B,MAAM;AACR;AAWO,IAAM,oBAAoB,CAAC,QAAgB,QAAmB;AAvBrE;AAwBE,SAAO,YAAY,CAAC;AAEpB,MAAI,OAAO,aAAO,gBAAP,mBAAoB,QAAQ,KAAK,IAAI,GAAG;AACjD,WAAO,QAAQ,KAAK,wBAAwB,SAAS,aAAO,gBAAP,mBAAoB,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC;AAAA,EAC7F;AACF;;;AVRO,IAAM,eAAe,CAAC,SAAuB,CAAC,MAAwB;AAC3E,SAAO,OAAO,CAAC,QAAQ;AACrB,WAAO,YAAY,OAAO,WAAW,aAAa,OAAO,GAAG,IAAI,QAAQ,GAAG;AAAA,EAC7E,CAAC;AACH;AAEA,IAAM,cAAc,CAAC,QAAgB,QAAmB;AACtD,cAAY,QAAQ,GAAG;AACvB,eAAa,QAAQ,GAAG;AACxB,YAAU,QAAQ,GAAG;AACrB,oBAAkB,QAAQ,GAAG;AAC7B,cAAY,QAAQ,GAAG;AACvB,YAAU,QAAQ,GAAG;AACrB,eAAa,QAAQ,GAAG;AACxB,aAAW,QAAQ,GAAG;AAEtB,SAAO;AACT;","names":[]}